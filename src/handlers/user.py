import random
from datetime import datetime, timedelta
from sqlalchemy import func, and_
import aiohttp
import os
from pathlib import Path

from aiogram import Dispatcher, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, Voice
from aiogram.filters import Command
from aiogram.utils.formatting import Spoiler
from typing import Optional

from database.schemas.flashcard import FlashcardSchemaUpdate
from src.database.exceptions import NotFoundError
from src.database.handlers import Handlers
from src.database.handlers.word import WordHandler
from src.database.models import Models
from src.database.utils.UnitOfWork import UnitOfWork
from src.database.schemas import (
    UserSchemaToDB, Languages, UserSchemaFromDB, FlashcardSchemaToDB,
    WordSchemaFromDB, UserSchemaUpdate, EnglishLevel
)
from src.handlers.classes import user_profile_fsm
from src.keyboards.inline import (
    get_settings_inline, get_word_inline, get_main_menu_inline, get_level_inline,
    get_notification_frequency_inline, get_word_review_inline
)
from src.messages.user import (
    choose_language, choose_level, choose_notification_frequency, get_settings_text, get_start_message, 
    get_word_review_message
)
from src.states.user import UserProfileState
from src.utils.utils import get_next_level, is_profile_complete
from src.services.spaced_repetition import SpacedRepetition
from src.dependencies import logger


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
AUDIO_DIR = Path("media/audio")
AUDIO_DIR.mkdir(parents=True, exist_ok=True)

async def get_word_audio(word: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è Google Text-to-Speech API
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, Google Text-to-Speech, Amazon Polly, –∏–ª–∏ –¥—Ä—É–≥–∏–µ
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π URL —Å Google TTS
        url = f"https://translate.google.com/translate_tts?ie=UTF-8&q={word}&tl=en&client=tw-ob"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    audio_path = AUDIO_DIR / f"{word}.mp3"
                    with open(audio_path, "wb") as f:
                        f.write(await response.read())
                    return str(audio_path)
    except Exception as e:
        print(f"Error getting audio for word {word}: {e}")
        return None

async def start(message: Message, state: FSMContext, uow: UnitOfWork):
    telegram_id = message.from_user.id
    user: Optional[UserSchemaFromDB] = await Handlers.handle_not_found_error(Handlers.user.get_one(uow, id=telegram_id))
    if user:
        language = user.language if user.language else Languages.ENGLISH
        await message.answer(get_start_message(language))
        # video = FSInputFile("media/video/instruction.mp4")
        # await message.answer_video(video=video, caption="üìñ –í—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.")
        if not is_profile_complete(user):
            await user_profile_fsm.fill_profile(message, state, user)
    else:
        data = UserSchemaToDB(
            id=telegram_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            full_name=message.from_user.full_name
        )
        await Handlers.user.add_one(uow, data)

        user = await Handlers.user.get_one(uow, id=telegram_id)
        await user_profile_fsm.add_last_message(state, last_message=get_start_message(user.language))
        await user_profile_fsm.fill_profile(message, state, user)


async def profile(message: Message, uow: UnitOfWork, user: UserSchemaFromDB):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    _error_handler = Handlers.handle_not_found_error
    all_flashcards = await _error_handler(Handlers.flashcard.get_all(uow, user_id=user.id), return_if_err=[])
    learning_words = [fc for fc in all_flashcards if not fc.learned]
    learned_words = [fc for fc in all_flashcards if fc.learned]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if user.language == Languages.RUSSIAN:
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ –ò–º—è: {user.full_name}\n"
            f"üåç –Ø–∑—ã–∫: {'–†—É—Å—Å–∫–∏–π' if user.language == Languages.RUSSIAN else 'English'}\n"
            f"üìö –£—Ä–æ–≤–µ–Ω—å: {user.english_level.value}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {user.notifications_per_day} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"üìñ –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(all_flashcards)}\n"
            f"üìö –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è: {len(learning_words)}\n"
            f"‚úÖ –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(learned_words)}\n"
        )
    else:
        profile_text = (
            f"üë§ <b>User Profile</b>\n\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ Name: {user.full_name}\n"
            f"üåç Language: {'Russian' if user.language == Languages.RUSSIAN else 'English'}\n"
            f"üìö Level: {user.english_level.value}\n"
            f"üîî Notifications: {user.notifications_per_day} times per day\n\n"
            f"üìä <b>Statistics</b>\n"
            f"üìñ Total words: {len(all_flashcards)}\n"
            f"üìö Learning: {len(learning_words)}\n"
            f"‚úÖ Learned: {len(learned_words)}\n"
        )
    
    await message.answer(profile_text, reply_markup=get_main_menu_inline(user.language))


async def show_learned_words(message: Message, uow: UnitOfWork, user: UserSchemaFromDB):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
    learned_flashcards = await Handlers.flashcard.get_all(uow, user_id=user.id, learned=True)
    
    if not learned_flashcards:
        if user.language == Languages.RUSSIAN:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è! üìö")
        else:
            await message.answer("You don't have any learned words yet. Keep learning! üìö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–∞—Ö
    learned_words = []
    for fc in learned_flashcards:
        word = await Handlers.word.get_one(uow, id=fc.word_id)
        learned_words.append(word)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user.language == Languages.RUSSIAN:
        header = "üìö <b>–í—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</b>\n\n"
    else:
        header = "üìö <b>Learned words:</b>\n\n"
    
    words_text = ""
    for i, word in enumerate(learned_words, 1):
        words_text += f"{i}. <b>{word.text}</b> - {word.translation}\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4000
    messages = []
    current_message = header
    
    for line in words_text.split('\n'):
        if len(current_message) + len(line) + 1 > max_length:
            messages.append(current_message)
            current_message = line + '\n'
        else:
            current_message += line + '\n'
    
    if current_message:
        messages.append(current_message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg in messages:
        await message.answer(msg)


async def support(message: Message, bot: Bot):
    await message.answer(
        f"‚úç –ü–∏—à–∏—Ç–µ @neponyatnuy —Å –∫–∞–∫–∏–º–∏-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–∞–º–∏:\n"
        f"üî® –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞;\n"
        f"üí° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è;\n"
        f"üí∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥;\n"
        f"üòâ —á—Ç–æ-–ª–∏–±–æ –µ—â—ë...\n\n"
        f"–¢–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: <code>{message.from_user.id}</code>"
    )
    await bot.send_contact(
        chat_id=message.chat.id,
        phone_number="+48786467177",
        first_name="Admin"
    )


async def listen(callback: CallbackQuery):
    word = callback.data.split("_")[1]
    # TODO: add a function to get word sound
    # send voice message to an user
    await callback.answer(f"–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞: {word}")


async def know(callback: CallbackQuery, uow: UnitOfWork, user: UserSchemaFromDB):
    word_id = callback.data.split("_")[1]
    # TODO: mark the word as known in the database
    word = await Handlers.word.get_one(uow, id=word_id)
    await Handlers.flashcard.add_one(uow, FlashcardSchemaToDB(user_id=user.id, word_id=word_id, known=True))
    await callback.answer(f"–°–ª–æ–≤–æ {word_id} –ø—Ä–æ–ø—É—â–µ–Ω–æ.")


async def learn_callback(callback: CallbackQuery):
    word = callback.data.split("_")[1]
    # TODO: add a word into a postgres table
    await callback.answer(f"–°–ª–æ–≤–æ {word} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑—É—á–∞–µ–º—ã–µ.")


async def learned_callback(callback: CallbackQuery):
    word = callback.data.split("_")[1]
    # TODO: mark the word as learned in the database
    await callback.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–æ–≤–æ {word} –≤—ã—É—á–µ–Ω–æ.")


async def settings_callback(callback: CallbackQuery, state: FSMContext, uow: UnitOfWork, user: UserSchemaFromDB):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = get_settings_text(user.language, user.english_level, user.notifications_per_day)
    keyboard = get_settings_inline(user.language)
    await callback.message.edit_text(text, reply_markup=keyboard)


async def settings_edit_callback(callback: CallbackQuery, state: FSMContext, uow: UnitOfWork, user: UserSchemaFromDB):
    await callback.answer()
    await state.clear()
    await user_profile_fsm.fill_profile(callback.message, state, user)

async def settings_back_callback(callback: CallbackQuery, state: FSMContext, uow: UnitOfWork, user: UserSchemaFromDB):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    await profile(callback.message, uow, user)
    await callback.answer()


async def next_word(message: Message, state: FSMContext, uow: UnitOfWork, user: UserSchemaFromDB):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_flashcards = await Handlers.flashcard.get_all(uow, user_id=user.id)
    all_used_word_ids = [flashcard.word_id for flashcard in all_flashcards]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–∑—É—á–∞–ª
    _filter = Models.word.c.id.notin_(all_used_word_ids)
    all_words = await Handlers.word.get_all(uow, _filter=_filter, level=user.english_level)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
    if not all_words:
        next_user_level = get_next_level(user.english_level)
        if not next_user_level:
            if user.language == Languages.RUSSIAN:
                await message.answer(
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–ª–∏ –∫ —Å—á–∞—Å—Ç—å—é, –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ—á–µ–º—É –≤–∞—Å —É—á–∏—Ç—å üôÉ.\n"
                    "P.S: –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—á–µ–Ω—å —Ä–∞–¥–∞ –∑–∞ –≤–∞—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ ‚ùó"
                )
            else:
                await message.answer(
                    "Congratulations! üéâ You have reached the last level of English.\n\n"
                    "Unfortunately or fortunately, we have nothing more to teach you üôÉ.\n"
                    "P.S: Our team is really happy for you and suggests celebrating this event ‚ùó"
                )
            return
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        if user.language == Languages.RUSSIAN:
            await message.answer(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω—è {user.english_level.value}.\n"
                f"–¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å - {next_user_level.value}.\n\n"
                f"P.S: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –∏ –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏ üôÇ‚ùó"
            )
        else:
            await message.answer(
                f"Congratulations! üéâ You have learned all words from level {user.english_level.value}.\n"
                f"Now your level is {next_user_level.value}.\n\n"
                f"P.S: Keep going and you will definitely achieve your goal üôÇ‚ùó"
            )
        
        await Handlers.user.update_one(uow, UserSchemaUpdate(english_level=next_user_level))
        user.english_level = next_user_level
        await next_word(message, state, uow, user)
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    random_word: WordSchemaFromDB = random.choice(all_words)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    initial_interval, initial_ease, initial_reps, next_review = SpacedRepetition.get_initial_values()
    new_flashcard = FlashcardSchemaToDB(
        user_id=user.id,
        word_id=random_word.id,
        next_review=next_review
    )
    await Handlers.flashcard.add_one(uow, new_flashcard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º
    await message.answer(
        get_word_review_message(user.language, random_word),
        reply_markup=get_word_review_inline(user.language, random_word.id)
    )

async def review_word(callback: CallbackQuery, uow: UnitOfWork, user: UserSchemaFromDB):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    word_id = int(callback.data.split("_")[1])
    word = await Handlers.word.get_one(uow, id=word_id)
    
    if user.language == Languages.RUSSIAN:
        text = (
            f"<b>–°–ª–æ–≤–æ:</b> {word.text}\n"
            f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {word.translation}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {word.example}\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ:"
        )
    else:
        text = (
            f"<b>Word:</b> {word.text}\n"
            f"<b>Translation:</b> {word.translation}\n"
            f"<b>Example:</b> {word.example}\n\n"
            f"Rate how well you know this word:"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="5Ô∏è‚É£", callback_data=f"rate_5_{word_id}"),
            InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=f"rate_4_{word_id}"),
            InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=f"rate_3_{word_id}"),
        ],
        [
            InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=f"rate_2_{word_id}"),
            InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=f"rate_1_{word_id}"),
            InlineKeyboardButton(text="0Ô∏è‚É£", callback_data=f"rate_0_{word_id}"),
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def process_word_rating(callback: CallbackQuery, uow: UnitOfWork, user: UserSchemaFromDB):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∑–Ω–∞–Ω–∏—è —Å–ª–æ–≤–∞"""
    _, rating, word_id = callback.data.split("_")
    rating = int(rating)
    word_id = int(word_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    flashcard = await Handlers.flashcard.get_one(uow, word_id=word_id, user_id=user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    updated_card = await Handlers.flashcard.process_answer(uow, flashcard.id, rating)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    if user.language == Languages.RUSSIAN:
        if updated_card.learned:
            text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ!"
        else:
            text = "‚úÖ –°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {} –¥–Ω–µ–π."
    else:
        if updated_card.learned:
            text = "üéâ Congratulations! You've learned this word!"
        else:
            text = "‚úÖ Word updated! Next review in {} days."
    
    await callback.message.edit_text(text.format(updated_card.interval))
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    await next_word(callback.message, None, uow, user)

async def listen_word(callback: CallbackQuery, uow: UnitOfWork, user: UserSchemaFromDB):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    word_id = int(callback.data.split("_")[1])
    word = await Handlers.word.get_one(uow, id=word_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    audio_path = await get_word_audio(word.text)
    if audio_path:
        await callback.message.answer_voice(
            voice=FSInputFile(audio_path),
            caption=f"üîä {word.text}"
        )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(audio_path)
    else:
        if user.language == Languages.RUSSIAN:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞")
        else:
            await callback.answer("‚ùå Could not get audio for this word")

async def skip_word(callback: CallbackQuery, uow: UnitOfWork, user: UserSchemaFromDB):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ"""
    word_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    flashcard = await Handlers.flashcard.get_one(uow, word_id=word_id, user_id=user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    await Handlers.flashcard.process_answer(uow, flashcard.id, 0)  # 0 - –Ω–µ –∑–Ω–∞—é
    
    if user.language == Languages.RUSSIAN:
        await callback.answer("‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        await callback.answer("‚è© Word skipped")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    await next_word(callback.message, None, uow, user)

def register_handlers(dp: Dispatcher):
    # COMMANDS
    dp.message.register(start, Command(commands=["start", "run"]))
    dp.message.register(profile, Command(commands="profile"))
    dp.message.register(support, Command(commands=["support"]))
    dp.message.register(show_learned_words, Command(commands=["learned"]))

    # User Profile
    dp.callback_query.register(user_profile_fsm.get_language, UserProfileState.LANGUAGE, F.data.startswith("language_"))
    dp.callback_query.register(user_profile_fsm.get_level, UserProfileState.ENGLISH_LEVEL, F.data.startswith("level_"))
    dp.callback_query.register(user_profile_fsm.get_notification_frequency, UserProfileState.NOTIFICATION, F.data.startswith("notification_"))

    # Settings
    dp.callback_query.register(settings_callback, F.data == "settings")
    dp.callback_query.register(settings_edit_callback, F.data == "settings_edit")
    dp.callback_query.register(settings_back_callback, F.data == "settings_back")

    # Word handling
    dp.message.register(next_word, Command(commands=["next_word"]))
    dp.callback_query.register(review_word, F.data.startswith("review_"))
    dp.callback_query.register(process_word_rating, F.data.startswith("rate_"))
    dp.callback_query.register(listen_word, F.data.startswith("listen_"))
    dp.callback_query.register(skip_word, F.data.startswith("skip_"))