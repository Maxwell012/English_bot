from src.database.schemas import Languages, EnglishLevel, WordSchemaFromDB
from aiogram.utils.formatting import Spoiler


def get_start_message(lan: Languages):
    match lan:
        case Languages.ENGLISH:
            text = (
                "‚úã Hi there! I'm here to help you learn English words:\n\n"
                "üîî I will send you words in notifications until you learn them;\n"
                "üíæ I will save the words you are learning/have learned;\n"
                "üßë‚Äçüè´ I will translate any words you send me.\n\n"
                "üèÅ Let's get started! Just press \"‚è© Next word\" or type a word you want to learn.\n\n"
                "üëÅÔ∏è In the settings, you can also hide word translations."
            )
        case Languages.RUSSIAN:
            text = (
                "‚úã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞:\n\n"
                "üîî –ë—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö, –ø–æ–∫–∞ —Ç—ã –∏—Ö –Ω–µ –≤—ã—É—á–∏—à—å;\n"
                "üíæ –ë—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É—á–∏—à—å/–≤—ã—É—á–∏–ª;\n"
                "üßë‚Äçüè´ –ë—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ –Ω–∞–ø–∏—à–µ—à—å.\n\n"
                "üèÅ –ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π \"‚è© –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ\" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å.\n\n"
                "üëÅÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å —Å–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤."
            )
        # case Languages.UKRAINE:
        #     text = (
        #         "‚úã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤—á–∏—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞:\n\n"
        #         "üîî –ù–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ —Å–ª–æ–≤–∞ —É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è—Ö –ø–æ–∫–∏ —Ç–∏ —ó—Ö –Ω–µ –≤–∏–≤—á–∏—à;\n"
        #         "üíæ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º—É —Å–ª–æ–≤–∞ —è–∫—ñ —Ç–∏ –≤—á–∏—à/–≤–∏–≤—á–∏–≤;\n"
        #         "üßë‚Äçüè´ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏–º—É —Å–ª–æ–≤–∞, —è–∫—ñ —Ç–∏ –º–µ–Ω—ñ –Ω–∞–ø–∏—à–µ—à.\n\n"
        #         "üèÅ –û—Ç–æ–∂, –ø–æ—ó—Ö–∞–ª–∏! –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–∫–∞–π \"‚è© –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ\" –∞–±–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ —è–∫–µ —Ç–∏ —Ö–æ—á–µ—à –≤–∏–≤—á–∏—Ç–∏.\n\n"
        #         "üëÅÔ∏è –í –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Ç–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à —Å—Ö–æ–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤."
        #     )
        case _:
            text = (
                "‚úã Hi there! I'm here to help you learn English words:\n\n"
                "üîî I will send you words in notifications until you learn them;\n"
                "üíæ I will save the words you are learning/have learned;\n"
                "üßë‚Äçüè´ I will translate any words you send me.\n\n"
                "üèÅ Let's get started! Just press \"‚è© Next word\" or type a word you want to learn.\n\n"
                "üëÅÔ∏è In the settings, you can also hide word translations."
            )
    return text


def choose_language(lan: Languages):
    match lan:
        case Languages.ENGLISH:
            text = "üëÖ Select a language for the interface and translations:"
        case Languages.RUSSIAN:
            text = "üëÖ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞:"
        # case Languages.UKRAINE:
        #     text = "üëÖ –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É:"
        case _:
            text = "üëÖ Select a language for the interface and translations:"
    return text


def language_setting(lan: Languages):
    match lan:
        case Languages.ENGLISH:
            text = "My language (interface): üá¨üáß English"
        case Languages.RUSSIAN:
            text = "–ú–æ–π —è–∑—ã–∫ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞): üá∑üá∫ –†—É—Å—Å–∫–∏–π"
        # case Languages.UKRAINE:
        #     text = "–ú–æ—è –º–æ–≤–∞ (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É): üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
        case _:
            text = "My language (interface): üá¨üáß English"
    return text


def choose_level(lan: Languages):
    match lan:
        case Languages.ENGLISH:
            text = "üìà Choose the level of English words you want to learn:"
        case Languages.RUSSIAN:
            text = "üìà –£–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å:"
        # case Languages.UKRAINE:
        #     text = "üìà –í–∫–∞–∂–∏ —è–∫–æ–≥–æ —Ä—ñ–≤–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞ —Ç–∏ —Ö–æ—á–µ—à –≤—á–∏—Ç–∏:"
        case _:
            text = "üìà Choose the level of English words you want to learn:"
    return text


level_text = {
    EnglishLevel.A1: {
        Languages.ENGLISH: "üëº A1 - Elementary",
        Languages.RUSSIAN: "üëº A1 - –ù–∞—á–∞–ª—å–Ω—ã–π",
        # Languages.UKRAINIAN: "üëº A1 - –ü–æ—á–∞—Ç–∫–æ–≤–∏–π"
    },
    EnglishLevel.A2: {
        Languages.ENGLISH: "üë∂ A2 - Pre-Intermediate",
        Languages.RUSSIAN: "üë∂ A2 - –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
        # Languages.UKRAINIAN: "üë∂ A2 - –ù–∏–∂—á–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ"
    },
    EnglishLevel.B1: {
        Languages.ENGLISH: "üí™ B1 - Intermediate",
        Languages.RUSSIAN: "üí™ B1 - –°—Ä–µ–¥–Ω–∏–π",
        # Languages.UKRAINIAN: "üí™ B1 - –°–µ—Ä–µ–¥–Ω—ñ–π"
    },
    EnglishLevel.B2: {
        Languages.ENGLISH: "ü¶ç B2 - Upper Intermediate",
        Languages.RUSSIAN: "ü¶ç B2 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
        # Languages.UKRAINIAN: "ü¶ç B2 - –í–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ"
    },
    EnglishLevel.C1: {
        Languages.ENGLISH: "‚ú® C1 - Advanced",
        Languages.RUSSIAN: "‚ú® C1 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        # Languages.UKRAINIAN: "‚ú® C1 - –ü—Ä–æ—Å—É–Ω—É—Ç–∏–π"
    }
}


def level_setting(lan: Languages, level: EnglishLevel):
    return level_text[level][lan]


def choose_notification_frequency(lan: Languages):
    match lan:
        case Languages.ENGLISH:
            text = "üîî How many times a day would you like me to send you words in notifications? (Optimal: 8)"
        case Languages.RUSSIAN:
            text = "üîî –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–µ–±–µ —Å–ª–æ–≤–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö? (–û–ø—Ç–∏–º–∞–ª—å–Ω–æ: 8)"
        # case Languages.UKRAINE:
        #     text = "üîî –°–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –≤ –¥–µ–Ω—å —Ç–∏ —Ö–æ—á–µ—à —â–æ–± —è –Ω–∞–¥—Å–∏–ª–∞–≤ —Ç–æ–±—ñ —Å–ª–æ–≤–∞ —É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è—Ö? (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 8)"
        case _:
            text = "üîî How many times a day would you like me to send you words in notifications? (Optimal: 8)"
    return text


def notification_setting(lan: Languages, number_notifications: int):
    if not isinstance(number_notifications, int) or number_notifications <= 0:
        raise ValueError("number_notifications –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è")

    def get_times_text(num, lang):
        if lang == "en":
            return f"{num} time per day" if num == 1 else f"{num} times per day"
        elif lang == "ru":
            if 11 <= num % 100 <= 19:
                return f"{num} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            last_digit = num % 10
            if last_digit == 1:
                return f"{num} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            elif 2 <= last_digit <= 4:
                return f"{num} —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"
            else:
                return f"{num} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
        # elif lang == "ua":
        #     if 11 <= num % 100 <= 19:
        #         return f"{num} —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å"
        #     last_digit = num % 10
        #     if last_digit == 1:
        #         return f"{num} —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å"
        #     elif 2 <= last_digit <= 4:
        #         return f"{num} —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å"
        #     else:
        #         return f"{num} —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å"

    match lan:
        case Languages.ENGLISH:
            text = f"Notifications: üîî {get_times_text(number_notifications, 'en')}"
        case Languages.RUSSIAN:
            text = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: üîî {get_times_text(number_notifications, 'ru')}"
        # case Languages.UKRAINE:
        #     text = f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: üîî {get_times_text(number_notifications, 'ua')}"
        case _:
            text = f"Notifications: üîî {get_times_text(number_notifications, 'en')}"

    return text


# def send_word_text(lan: Languages, word: str, example: str):
#     match lan:
#         case Languages.ENGLISH:
#             text = f"{word}\n\nExample: {example}"
#         case Languages.RUSSIAN:
#             text = f"{word}\n\n–ü—Ä–∏–º–µ—Ä: {example}"
#         # case Languages.UKRAINE:
#         #     text = f"{word}\n\n–ü—Ä–∏–∫–ª–∞–¥: {example}"
#         case _:
#             text = f"{word}\n\nExample: {example}"
#     return text


def get_word_review_message(language: Languages, word: WordSchemaFromDB) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    if language == Languages.RUSSIAN:
        return (
            f"<b>–°–ª–æ–≤–æ:</b> {word.text}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {Spoiler(word.example)}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤–∞."
        )
    else:
        return (
            f"<b>Word:</b> {word.text}\n"
            f"<b>Example:</b> {Spoiler(word.example)}\n\n"
            f"Click the button to see the translation and rate your knowledge of the word."
        )
    
def get_settings_text(lan: Languages, level: EnglishLevel, notification: int) -> str:
    if lan == Languages.RUSSIAN:
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üåç <b>–Ø–∑—ã–∫</b>   ---   {lan.value}\n"
            f"üìö <b>–£—Ä–æ–≤–µ–Ω—å:</b>   ---   {level.value}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>   ---   {notification} –∑–∞ –¥–µ–Ω—å"
        )
    else:
        text = (
            "‚öôÔ∏è <b>Settings</b>\n\n"
            f"üåç <b>Language</b>   ---   {lan.value}\n"
            f"üìö <b>Level</b>   ---   {level.value}\n"
            f"üîî <b>Notifications</b>   ---   {notification} per day"
        )
    return text